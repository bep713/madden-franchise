import sinon from 'sinon';
import { expect } from 'chai';
import quibble from 'quibble';

const strategySpy = {
    generateUnpackedContents: sinon.spy()
};

describe('Franchise File Strategy unit tests', () => {
    let FranchiseFileStrategy;

    beforeEach(async () => {
        strategySpy.generateUnpackedContents.resetHistory();

        await quibble.esm(
            '../../../../src/strategies/common/file/CommonFileStrategy.js',
            {},
            strategySpy
        );
        FranchiseFileStrategy = (
            await import(
                '../../../../src/strategies/common/file/FranchiseFileStrategy.js'
            )
        ).default;
    });

    afterEach(() => {
        quibble.reset();
    });

    it('can save updates made to data', () => {
        let tables = [
            {
                offset: 0,
                data: Buffer.from([0x4f, 0x6c, 0x64, 0x44, 0x61, 0x74]),
                hexData: Buffer.from([0x4f, 0x6c, 0x64, 0x44, 0x61, 0x74]),
                isChanged: false
            },
            {
                offset: 6,
                data: Buffer.from([0x4f, 0x6c, 0x64, 0x44, 0x61, 0x74]),
                hexData: Buffer.from([0x4f, 0x6c, 0x64, 0x44, 0x61, 0x74]),
                isChanged: false
            }
        ];

        let data = Buffer.concat(
            tables.map((table) => {
                return table.hexData;
            })
        );

        FranchiseFileStrategy.generateUnpackedContents(tables, data);

        expect(strategySpy.generateUnpackedContents.calledOnce).to.be.true;
        expect(strategySpy.generateUnpackedContents.args[0][0]).to.eql(tables);
        expect(strategySpy.generateUnpackedContents.args[0][1]).to.eql(data);
    });

    describe('post pack file', () => {
        it('returns correct length', () => {
            const originalData = Buffer.from([
                0x46, 0x42, 0x43, 0x48, 0x55, 0x4e, 0x4b, 0x53, 0x01, 0x00,
                0x40, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0x2c, 0x00, 0x0c, 0xcd,
                0x2c, 0x00, 0xe3, 0x07, 0x08, 0x00, 0x0f, 0x00, 0x13, 0x00,
                0x23, 0x00, 0x15, 0x00, 0x4d, 0x32, 0x30, 0x5f, 0x52, 0x4c,
                0x33, 0x2d, 0x33, 0x34, 0x32, 0x36, 0x39, 0x30, 0x30, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x56, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x1d, 0x6b, 0x1a, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x78, 0x9c, 0xcc, 0xdd, 0x09, 0x9c, 0x5c, 0xe5,
                0x40, 0x30, 0x20, 0x10, 0x00, 0x00, 0x00
            ]);

            const newData = Buffer.from([
                0x78, 0x9c, 0xcc, 0xdd, 0x09, 0x9c, 0x5c, 0xe5
            ]);

            const result = FranchiseFileStrategy.postPackFile(
                originalData,
                newData
            );
            expect(result.length).to.equal(originalData.length);
        });

        it('returns expected result', () => {
            const originalData = Buffer.from([
                0x46, 0x42, 0x43, 0x48, 0x55, 0x4e, 0x4b, 0x53, 0x01, 0x00,
                0x40, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0x2c, 0x00, 0x0c, 0xcd,
                0x2c, 0x00, 0xe3, 0x07, 0x08, 0x00, 0x0f, 0x00, 0x13, 0x00,
                0x23, 0x00, 0x15, 0x00, 0x4d, 0x32, 0x30, 0x5f, 0x52, 0x4c,
                0x33, 0x2d, 0x33, 0x34, 0x32, 0x36, 0x39, 0x30, 0x30, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x56, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x1d, 0x6b, 0x1a, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x78, 0x9c, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00,
                0x40, 0x30, 0x20, 0x10, 0x00, 0x00, 0x00
            ]);

            const newData = Buffer.from([
                0x78, 0x9c, 0xcc, 0xdd, 0x09, 0x9c, 0x5c, 0xe5
            ]);

            const result = FranchiseFileStrategy.postPackFile(
                originalData,
                newData
            );

            expect(result.slice(0x52, 0x52 + newData.length)).to.eql(newData);
            expect(result.readUIntBE(0x4a, 3)).to.eql(newData.length);
        });
    });
});
